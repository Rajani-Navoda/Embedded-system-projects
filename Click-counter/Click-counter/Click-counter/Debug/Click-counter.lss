
Click-counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e4  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000255  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001629  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_1>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile bool showed = false;


int main(void)
{
	DDRB = 0b00111111;
  90:	8f e3       	ldi	r24, 0x3F	; 63
  92:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11000000;
  94:	80 ec       	ldi	r24, 0xC0	; 192
  96:	8a b9       	out	0x0a, r24	; 10

	PORTD = PORTD | (1<<2) | (1<<3); //input pull-up
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	8c 60       	ori	r24, 0x0C	; 12
  9c:	8b b9       	out	0x0b, r24	; 11

	EICRA = 0b00001010; // falling interrupt
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011;
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	8d bb       	out	0x1d, r24	; 29
	
	sei();
  a8:	78 94       	sei
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x1a>

000000ac <__vector_1>:
		
		
	}
	return 0;
}
ISR(INT0_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24

	count++;
  b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
	
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_2>:

ISR(INT1_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	showed =! showed;
  e0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	89 27       	eor	r24, r25
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	
	if (showed)
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	88 23       	and	r24, r24
  f2:	99 f0       	breq	.+38     	; 0x11a <__vector_2+0x4c>
	{
		PORTB = PORTB| (count >>2) ;
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
  fa:	86 95       	lsr	r24
  fc:	86 95       	lsr	r24
  fe:	89 2b       	or	r24, r25
 100:	85 b9       	out	0x05, r24	; 5
		PORTD = PORTD | (count <<  6) ;  // & with zeros will only output to the ports with 1.then the right shift will shift the port bits to the 0 and 1 pins of the port
 102:	2b b1       	in	r18, 0x0b	; 11
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <count>
 108:	30 e4       	ldi	r19, 0x40	; 64
 10a:	93 9f       	mul	r25, r19
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	82 2b       	or	r24, r18
 112:	8b b9       	out	0x0b, r24	; 11
		count = 0;
 114:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count>
 118:	08 c0       	rjmp	.+16     	; 0x12a <__vector_2+0x5c>
	}
	else{
		PORTB = PORTB & 0b11000000;
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	80 7c       	andi	r24, 0xC0	; 192
 11e:	85 b9       	out	0x05, r24	; 5
		PORTD = PORTD & 0b00111111;
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	8f 73       	andi	r24, 0x3F	; 63
 124:	8b b9       	out	0x0b, r24	; 11
		count = 0;
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count>
	}
	
	
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
